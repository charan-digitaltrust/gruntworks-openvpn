#!/usr/bin/env bash
#
# This script is used to run process-cert-requests.
#
set -e

readonly DEFAULT_IS_SYSLOG="false"
readonly DEFAULT_IS_DEV_MODE="false"

readonly SUPERVISOR_CONFIG_PATH="/etc/supervisor/conf.d/openvpn-admin-requests.conf"
readonly BIN_FULL_PATH="/usr/local/bin/openvpn-admin"
readonly BIN_NAME="openvpn-admin"
readonly LOG_DIR="/var/log"

readonly EMPTY_VAL="__EMPTY__"

function print_usage {
  echo
  echo "Usage: run-process-requests [OPTIONS]"
  echo
  echo "Run openvpn-admin with the process-requests option."
  echo
  echo "Required Arguments:"
  echo
  echo -e "  --region\t\t\tThe AWS region where the requests SQS queue is deployed."
  echo
  echo "Optional Arguments:"
  echo
  echo -e "  --request-url\t\t\tThe url of the sqs queue for requests."
  echo -e "  --syslog\t\t\tIf specified, all log output will be sent to syslog instead of written to a file in /var/log."
  echo
  echo "Example:"
  echo
  echo "  run-process-requests \\"
  echo "     --syslog"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  local readonly script_name="$(basename "$0")"

  >&2 echo -e "${timestamp} [${level}] [$script_name] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

# Assert that this script is being run on an EC2 Instance
function assert_is_ec2_instance {
  curl --silent -o /dev/null --fail "http://169.254.169.254/latest/meta-data/" && :
}

# Assert that we're running as the root user
function assert_uid_is_root_or_sudo {
  if [[ $EUID != 0 ]]; then
    log_error "This script should be run using sudo or as the root user"
    exit 1
  fi
}

# Assert that the given argument is not empty
function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]] || [[ "$arg_value" == "$EMPTY_VAL" ]]; then
    log "ERROR: The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

# Assert that a given binary is installed on this box
function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

# Based on http://unix.stackexchange.com/a/144330/129208
function trim_last_character {
  local readonly str="$1"

  echo ${str::-1}
}

function generate_supervisor_config {
  local readonly supervisor_config_path="$1"
  local readonly use_syslog="$2"
  local readonly region="$3"
  local readonly requeust_url="$4"

  local stdout_logfile_dest

  log_info "Creating Supervisor config file to run $BIN_NAME in $supervisor_config_path"

  # - Using simply the keyword "syslog" for the stdout_logfile will direct supervisord to write to syslog.
  if [[ "$use_syslog" == "true" ]]; then
    log_info "$BIN_NAME logs will be directed to syslog"
    stdout_logfile_dest="syslog"
  else
    stdout_logfile_dest="/var/log/$BIN_NAME-requests.log"
  fi

  params="--aws-region ""$region"""
  if [ -n "requeust_url" ]; then
    params="--aws-region ""$region"" --request-url=""$requeust_url"""
  fi

  cat > "$supervisor_config_path" <<EOF
[program:$BIN_NAME-requests]
command=$BIN_FULL_PATH process-requests $params
environment=AWS_DEFAULT_REGION="$region"
stdout_logfile=$stdout_logfile_dest
redirect_stderr=true
numprocs=1
autostart=true
autorestart=true
stopsignal=TERM
stopwaitsecs=300
EOF
}

function start_process_cert_requests {
  log_info "Reloading Supervisor config and starting $BIN_NAME"
  supervisorctl reread
  supervisorctl update
}

function install_supervisord {
  apt-get install -y supervisor
  systemctl enable supervisor
  systemctl start supervisor
}

function run_process_requests {
  local is_syslog="$DEFAULT_IS_SYSLOG"
  local region
  local request_url

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
    --region)
      region="$2"
      shift
      ;;
    --request-url)
      request_url="$2"
      shift
      ;;
    --syslog)
      is_syslog="true"
      ;;
    --help)
      print_usage
      exit
      ;;
    *)
      log_error "Unrecognized argument: $key"
      print_usage
      exit 1
      ;;
    esac

    shift
  done

  # Assert our assumptions and validate input
  assert_uid_is_root_or_sudo
  assert_is_ec2_instance
  assert_not_empty "--region" "$region"

  install_supervisord

  generate_supervisor_config \
    "$SUPERVISOR_CONFIG_PATH" \
    "$is_syslog" \
    "$region" \
    "$request_url"

  start_process_cert_requests
}

run_process_requests "$@"